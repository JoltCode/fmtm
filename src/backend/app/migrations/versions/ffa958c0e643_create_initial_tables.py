"""create_initial_tables.

Revision ID: ffa958c0e643
Revises:
Create Date: 2023-06-04 05:10:26.929986

"""
import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ffa958c0e643"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis;")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "background_tasks",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING", "FAILED", "RECEIVED", "SUCCESS", name="backgroundtaskstatus"
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "licenses",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("plain_text", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "mapping_issue_categories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("archived", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "organisations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=512), nullable=False),
        sa.Column("slug", sa.String(length=255), nullable=False),
        sa.Column("logo", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column(
            "type",
            sa.Enum("FREE", "DISCOUNTED", "FULL_FEE", name="organisationtype"),
            nullable=False,
        ),
        sa.Column("subscription_tier", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "qr_code",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("filename", sa.String(), nullable=True),
        sa.Column("image", sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column(
            "role",
            sa.Enum(
                "MAPPER",
                "ADMIN",
                "VALIDATOR",
                "FIELD_ADMIN",
                "ORGANIZATION_ADMIN",
                "READ_ONLY",
                name="userrole",
            ),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("city", sa.String(), nullable=True),
        sa.Column("country", sa.String(), nullable=True),
        sa.Column("email_address", sa.String(), nullable=True),
        sa.Column("is_email_verified", sa.Boolean(), nullable=True),
        sa.Column("is_expert", sa.Boolean(), nullable=True),
        sa.Column(
            "mapping_level",
            sa.Enum("BEGINNER", "INTERMEDIATE", "ADVANCED", name="mappinglevel"),
            nullable=False,
        ),
        sa.Column("tasks_mapped", sa.Integer(), nullable=False),
        sa.Column("tasks_validated", sa.Integer(), nullable=False),
        sa.Column("tasks_invalidated", sa.Integer(), nullable=False),
        sa.Column("projects_mapped", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("date_registered", sa.DateTime(), nullable=True),
        sa.Column("last_validation_date", sa.DateTime(), nullable=True),
        sa.Column("password", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "xlsforms",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("category", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("xml", sa.String(), nullable=True),
        sa.Column("xls", sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("title"),
    )
    op.create_table(
        "organisation_managers",
        sa.Column("organisation_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["organisation_id"],
            ["organisations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.UniqueConstraint("organisation_id", "user_id", name="organisation_user_key"),
    )
    op.create_table(
        "projects",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("odkid", sa.Integer(), nullable=True),
        sa.Column("author_id", sa.BigInteger(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column(
            "task_creation_mode",
            sa.Enum("GRID", "ROADS", "UPLOAD", name="taskcreationmode"),
            nullable=False,
        ),
        sa.Column("project_name_prefix", sa.String(), nullable=True),
        sa.Column("task_type_prefix", sa.String(), nullable=True),
        sa.Column("location_str", sa.String(), nullable=True),
        sa.Column(
            "outline",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("last_updated", sa.DateTime(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("ARCHIVED", "PUBLISHED", "DRAFT", name="projectstatus"),
            nullable=False,
        ),
        sa.Column("total_tasks", sa.Integer(), nullable=True),
        sa.Column("odk_central_src", sa.String(), nullable=True),
        sa.Column("xform_title", sa.String(), nullable=True),
        sa.Column("private", sa.Boolean(), nullable=True),
        sa.Column(
            "mapper_level",
            sa.Enum("BEGINNER", "INTERMEDIATE", "ADVANCED", name="mappinglevel"),
            nullable=False,
        ),
        sa.Column(
            "priority",
            sa.Enum("URGENT", "HIGH", "MEDIUM", "LOW", name="projectpriority"),
            nullable=True,
        ),
        sa.Column("featured", sa.Boolean(), nullable=True),
        sa.Column(
            "mapping_permission",
            sa.Enum("ANY", "LEVEL", "TEAMS", "TEAMS_LEVEL", name="mappingpermission"),
            nullable=True,
        ),
        sa.Column(
            "validation_permission",
            sa.Enum(
                "ANY", "LEVEL", "TEAMS", "TEAMS_LEVEL", name="validationpermission"
            ),
            nullable=True,
        ),
        sa.Column("organisation_id", sa.Integer(), nullable=True),
        sa.Column("due_date", sa.DateTime(), nullable=True),
        sa.Column("changeset_comment", sa.String(), nullable=True),
        sa.Column("osmcha_filter_id", sa.String(), nullable=True),
        sa.Column("imagery", sa.String(), nullable=True),
        sa.Column("osm_preset", sa.String(), nullable=True),
        sa.Column("odk_preset", sa.String(), nullable=True),
        sa.Column("josm_preset", sa.String(), nullable=True),
        sa.Column("id_presets", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("extra_id_params", sa.String(), nullable=True),
        sa.Column("license_id", sa.Integer(), nullable=True),
        sa.Column(
            "centroid",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("odk_central_url", sa.String(), nullable=True),
        sa.Column("odk_central_user", sa.String(), nullable=True),
        sa.Column("odk_central_password", sa.String(), nullable=True),
        sa.Column("extract_completed_count", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["author_id"], ["users.id"], name="fk_users"),
        sa.ForeignKeyConstraint(["license_id"], ["licenses.id"], name="fk_licenses"),
        sa.ForeignKeyConstraint(
            ["organisation_id"], ["organisations.id"], name="fk_organisations"
        ),
        sa.ForeignKeyConstraint(["xform_title"], ["xlsforms.title"], name="fk_xform"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_geometry", "projects", ["outline"], unique=False, postgresql_using="gist"
    )
    # op.create_index('idx_projects_centroid', 'projects', ['centroid'], unique=False, postgresql_using='gist')
    # op.create_index('idx_projects_outline', 'projects', ['outline'], unique=False, postgresql_using='gist')
    op.create_index(
        op.f("ix_projects_mapper_level"), "projects", ["mapper_level"], unique=False
    )
    op.create_index(
        op.f("ix_projects_organisation_id"),
        "projects",
        ["organisation_id"],
        unique=False,
    )
    op.create_table(
        "teams",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("organisation_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=512), nullable=False),
        sa.Column("logo", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("invite_only", sa.Boolean(), nullable=False),
        sa.Column(
            "visibility",
            sa.Enum("PUBLIC", "PRIVATE", name="teamvisibility"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organisation_id"], ["organisations.id"], name="fk_organisations"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_licenses",
        sa.Column("user", sa.BigInteger(), nullable=True),
        sa.Column("license", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["license"],
            ["licenses.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user"],
            ["users.id"],
        ),
    )
    op.create_table(
        "project_allowed_users",
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
    )
    op.create_table(
        "project_chat",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("time_stamp", sa.DateTime(), nullable=False),
        sa.Column("message", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_project_chat_project_id"), "project_chat", ["project_id"], unique=False
    )
    op.create_table(
        "project_info",
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("project_id_str", sa.String(), nullable=True),
        sa.Column("name", sa.String(length=512), nullable=True),
        sa.Column("short_description", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("text_searchable", postgresql.TSVECTOR(), nullable=True),
        sa.Column("per_task_instructions", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.PrimaryKeyConstraint("project_id"),
    )
    op.create_index("textsearch_idx", "project_info", ["text_searchable"], unique=False)
    op.create_table(
        "project_teams",
        sa.Column("team_id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("role", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.PrimaryKeyConstraint("team_id", "project_id"),
    )
    op.create_table(
        "tasks",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("project_task_index", sa.Integer(), nullable=True),
        sa.Column("project_task_name", sa.String(), nullable=True),
        sa.Column(
            "outline",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("geometry_geojson", sa.String(), nullable=True),
        sa.Column("initial_feature_count", sa.Integer(), nullable=True),
        sa.Column(
            "task_status",
            sa.Enum(
                "READY",
                "LOCKED_FOR_MAPPING",
                "MAPPED",
                "LOCKED_FOR_VALIDATION",
                "VALIDATED",
                "INVALIDATED",
                "BAD",
                "SPLIT",
                "ARCHIVED",
                name="taskstatus",
            ),
            nullable=True,
        ),
        sa.Column("locked_by", sa.BigInteger(), nullable=True),
        sa.Column("mapped_by", sa.BigInteger(), nullable=True),
        sa.Column("validated_by", sa.BigInteger(), nullable=True),
        sa.Column("qr_code_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["locked_by"], ["users.id"], name="fk_users_locked"),
        sa.ForeignKeyConstraint(["mapped_by"], ["users.id"], name="fk_users_mapper"),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["qr_code_id"],
            ["qr_code.id"],
        ),
        sa.ForeignKeyConstraint(
            ["validated_by"], ["users.id"], name="fk_users_validator"
        ),
        sa.PrimaryKeyConstraint("id", "project_id"),
    )
    op.create_index(op.f("ix_tasks_locked_by"), "tasks", ["locked_by"], unique=False)
    op.create_index(op.f("ix_tasks_mapped_by"), "tasks", ["mapped_by"], unique=False)
    op.create_index(op.f("ix_tasks_project_id"), "tasks", ["project_id"], unique=False)
    op.create_index(op.f("ix_tasks_qr_code_id"), "tasks", ["qr_code_id"], unique=False)
    op.create_index(
        op.f("ix_tasks_validated_by"), "tasks", ["validated_by"], unique=False
    )
    op.create_table(
        "user_roles",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column(
            "role",
            sa.Enum(
                "MAPPER",
                "ADMIN",
                "VALIDATOR",
                "FIELD_ADMIN",
                "ORGANIZATION_ADMIN",
                "READ_ONLY",
                name="userrole",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organisations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "features",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("category_title", sa.String(), nullable=True),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column("properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                srid=4326, from_text="ST_GeomFromEWKT", name="geometry"
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["category_title"], ["xlsforms.title"], name="fk_xform"
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id", "project_id"], ["tasks.id", "tasks.project_id"], name="fk_tasks"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_features_composite", "features", ["task_id", "project_id"], unique=False
    )
    op.create_table(
        "task_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column(
            "action",
            sa.Enum(
                "RELEASED_FOR_MAPPING",
                "LOCKED_FOR_MAPPING",
                "MARKED_MAPPED",
                "LOCKED_FOR_VALIDATION",
                "VALIDATED",
                "MARKED_INVALID",
                "MARKED_BAD",
                "SPLIT_NEEDED",
                "RECREATED",
                "COMMENT",
                name="taskaction",
            ),
            nullable=False,
        ),
        sa.Column("action_text", sa.String(), nullable=True),
        sa.Column("action_date", sa.DateTime(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id", "project_id"], ["tasks.id", "tasks.project_id"], name="fk_tasks"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="fk_users"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_task_history_composite",
        "task_history",
        ["task_id", "project_id"],
        unique=False,
    )
    op.create_index(
        "idx_task_history_project_id_user_id",
        "task_history",
        ["user_id", "project_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_task_history_project_id"), "task_history", ["project_id"], unique=False
    )
    op.create_index(
        op.f("ix_task_history_user_id"), "task_history", ["user_id"], unique=False
    )
    op.create_table(
        "task_invalidation_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column("is_closed", sa.Boolean(), nullable=True),
        sa.Column("mapper_id", sa.BigInteger(), nullable=True),
        sa.Column("mapped_date", sa.DateTime(), nullable=True),
        sa.Column("invalidator_id", sa.BigInteger(), nullable=True),
        sa.Column("invalidated_date", sa.DateTime(), nullable=True),
        sa.Column("invalidation_history_id", sa.Integer(), nullable=True),
        sa.Column("validator_id", sa.BigInteger(), nullable=True),
        sa.Column("validated_date", sa.DateTime(), nullable=True),
        sa.Column("updated_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["invalidation_history_id"],
            ["task_history.id"],
            name="fk_invalidation_history",
        ),
        sa.ForeignKeyConstraint(
            ["invalidator_id"], ["users.id"], name="fk_invalidators"
        ),
        sa.ForeignKeyConstraint(["mapper_id"], ["users.id"], name="fk_mappers"),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id", "project_id"], ["tasks.id", "tasks.project_id"], name="fk_tasks"
        ),
        sa.ForeignKeyConstraint(["validator_id"], ["users.id"], name="fk_validators"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_task_validation_history_composite",
        "task_invalidation_history",
        ["task_id", "project_id"],
        unique=False,
    )
    op.create_index(
        "idx_task_validation_mapper_status_composite",
        "task_invalidation_history",
        ["mapper_id", "is_closed"],
        unique=False,
    )
    op.create_index(
        "idx_task_validation_validator_status_composite",
        "task_invalidation_history",
        ["invalidator_id", "is_closed"],
        unique=False,
    )
    op.create_table(
        "task_mapping_issues",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("task_history_id", sa.Integer(), nullable=False),
        sa.Column("issue", sa.String(), nullable=False),
        sa.Column("mapping_issue_category_id", sa.Integer(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["mapping_issue_category_id"],
            ["mapping_issue_categories.id"],
            name="fk_issue_category",
        ),
        sa.ForeignKeyConstraint(
            ["task_history_id"],
            ["task_history.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_task_mapping_issues_task_history_id"),
        "task_mapping_issues",
        ["task_history_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.execute("DROP EXTENSION IF EXISTS postgis;")

    op.drop_index(
        op.f("ix_task_mapping_issues_task_history_id"), table_name="task_mapping_issues"
    )
    op.drop_table("task_mapping_issues")
    op.drop_index(
        "idx_task_validation_validator_status_composite",
        table_name="task_invalidation_history",
    )
    op.drop_index(
        "idx_task_validation_mapper_status_composite",
        table_name="task_invalidation_history",
    )
    op.drop_index(
        "idx_task_validation_history_composite", table_name="task_invalidation_history"
    )
    op.drop_table("task_invalidation_history")
    op.drop_index(op.f("ix_task_history_user_id"), table_name="task_history")
    op.drop_index(op.f("ix_task_history_project_id"), table_name="task_history")
    op.drop_index("idx_task_history_project_id_user_id", table_name="task_history")
    op.drop_index("idx_task_history_composite", table_name="task_history")
    op.drop_table("task_history")
    op.drop_index(
        "idx_features_geometry", table_name="features", postgresql_using="gist"
    )
    op.drop_index("idx_features_composite", table_name="features")
    op.drop_table("features")
    op.drop_table("user_roles")
    op.drop_index(op.f("ix_tasks_validated_by"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_qr_code_id"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_project_id"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_mapped_by"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_locked_by"), table_name="tasks")
    op.drop_index("idx_tasks_outline", table_name="tasks", postgresql_using="gist")
    op.drop_index("idx_geometry", table_name="tasks", postgresql_using="gist")
    op.drop_table("tasks")
    op.drop_table("project_teams")
    op.drop_index("textsearch_idx", table_name="project_info")
    op.drop_table("project_info")
    op.drop_index(op.f("ix_project_chat_project_id"), table_name="project_chat")
    op.drop_table("project_chat")
    op.drop_table("project_allowed_users")
    op.drop_table("user_licenses")
    op.drop_table("teams")
    op.drop_index(op.f("ix_projects_organisation_id"), table_name="projects")
    op.drop_index(op.f("ix_projects_mapper_level"), table_name="projects")
    op.drop_index(
        "idx_projects_outline", table_name="projects", postgresql_using="gist"
    )
    op.drop_index(
        "idx_projects_centroid", table_name="projects", postgresql_using="gist"
    )
    op.drop_index("idx_geometry", table_name="projects", postgresql_using="gist")
    op.drop_table("projects")
    op.drop_table("organisation_managers")
    op.drop_table("xlsforms")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_table("qr_code")
    op.drop_table("organisations")
    op.drop_table("mapping_issue_categories")
    op.drop_table("licenses")
    op.drop_table("background_tasks")
    # ### end Alembic commands ###
